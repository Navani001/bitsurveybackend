generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Login {
  id                     Int                     @id @default(autoincrement())
  name                   String
  email                  String                  @unique
  roleId                 Int
  logo                   String?
  rp                     Int                     @default(0) // Added RP field for students
  isDeleted              Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  role                   Role                    @relation(fields: [roleId], references: [id])
  surveys                Survey[]
  otherValues            OtherValue[]
  studentSurveyResponses StudentSurveyResponse[]
  groupStudents          GroupStudent[]
  surveyParticipation    SurveyParticipant[] // Added for tracking which groups/surveys a login belongs to
  studentSkills          StudentSkill[] // Relation to student skills
}

model Role {
  id         Int         @id @default(autoincrement())
  name       String
  logins     Login[]
  // Added relationship to groups
}

model QuestionType {
  id              Int              @id @default(autoincrement())
  name            String
  isDeleted       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  surveyQuestions SurveyQuestion[]
}

model OptionShowType {
  id                            Int                            @id @default(autoincrement())
  status                        String
  surveyQuestions               SurveyQuestion[]
  optionShowTypeSurveyQuestions OptionShowTypeSurveyQuestion[]
}

model OptionType {
  id              Int              @id @default(autoincrement())
  type            String
  surveyQuestions SurveyQuestion[]
  options         Options[]
}

model Survey {
  id                 Int                 @id @default(autoincrement())
  name               String
  facultyId          Int
  status             String
  startTime          DateTime?
  endTime            DateTime?
  groupId            Int? // Optional group ID (can be null)
  responseCount      Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  faculty            Login               @relation(fields: [facultyId], references: [id])
  surveyQuestions    SurveyQuestion[]
  groups             SurveyGroup[] // Many-to-many relationship with groups (can be empty)
  surveyParticipants SurveyParticipant[] // Track participants
}

model SurveyQuestion {
  id                            Int                            @id @default(autoincrement())
  questionTypeId                Int
  surveyId                      Int
  question                      String
  score                         Int                            @default(-1)
  optionTypeId                  Int
  isOther                       Boolean                        @default(false)
  isActive                      Boolean                        @default(true)
  isMultiple                    Boolean                        @default(false)
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  questionType                  QuestionType                   @relation(fields: [questionTypeId], references: [id])
  survey                        Survey                         @relation(fields: [surveyId], references: [id])
  optionType                    OptionType                     @relation(fields: [optionTypeId], references: [id])
  matrixColumns                 MatrixColumn[]
  optionsQuestions              OptionsQuestion[]
  studentSurveyResponses        StudentSurveyResponse[]
  otherValues                   OtherValue[]
  optionShowTypeSurveyQuestions OptionShowTypeSurveyQuestion[]
  optionShowType                OptionShowType?                @relation(fields: [optionShowTypeId], references: [id])
  optionShowTypeId              Int?
}

model MatrixColumn {
  id         Int            @id @default(autoincrement())
  columnName String
  questionId Int
  question   SurveyQuestion @relation(fields: [questionId], references: [id])
}

model Skill {
  id            Int            @id @default(autoincrement())
  name          String
  skillLevels   SkillLevel[]   // Added relation to SkillLevel
  // Relation to student skills
}

model SkillLevel {
  id       Int   @id @default(autoincrement())
  skillId  Int
  level    Int
  skill    Skill @relation(fields: [skillId], references: [id]) // Added relation back to Skill
  studentSkills StudentSkill[]
}


model Group {
  id          Int           @id @default(autoincrement())
  name        String
  minimumRp   Int           @default(0)
  maximumRp   Int           @default(1000000000)
  level       Int           @default(0)
  description String?
  surveys     SurveyGroup[]
  groupStudents GroupStudent[] // Added relation to GroupStudent
}

model GroupStudent {
  id       Int   @id @default(autoincrement())
  groupId  Int
  loginId  Int
  group    Group @relation(fields: [groupId], references: [id])
  login    Login @relation(fields: [loginId], references: [id])

  @@unique([groupId, loginId]) // Prevent duplicate group-student assignments
}



// Junction table for Survey-Group many-to-many
model SurveyGroup {
  id       Int    @id @default(autoincrement())
  surveyId Int
  groupId  Int
  survey   Survey @relation(fields: [surveyId], references: [id])
  group    Group  @relation(fields: [groupId], references: [id])

  @@unique([surveyId, groupId])
}

// Junction table for tracking survey participants
model SurveyParticipant {
  id       Int    @id @default(autoincrement())
  surveyId Int
  loginId  Int
  survey   Survey @relation(fields: [surveyId], references: [id])
  login    Login  @relation(fields: [loginId], references: [id])

  @@unique([surveyId, loginId])
}

model OptionShowTypeSurveyQuestion {
  id               Int            @id @default(autoincrement())
  surveyQuestionId Int
  optionShowTypeId Int
  surveyQuestion   SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  optionShowType   OptionShowType @relation(fields: [optionShowTypeId], references: [id])
}

model StudentSurveyResponse {
  id               Int @id @default(autoincrement())
  surveyQuestionId Int
  loginId          Int
  SelectedOptionId Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  surveyQuestion   SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  login            Login          @relation(fields: [loginId], references: [id])
}

model Options {
  id               Int               @id @default(autoincrement())
  name             String?
  optionTypeId     Int
  isPredefined     Boolean
  priority         Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isDeleted        Boolean           @default(false)
  optionType       OptionType        @relation(fields: [optionTypeId], references: [id])
  optionsQuestions OptionsQuestion[]
}

model OptionsQuestion {
  id         Int            @id @default(autoincrement())
  optionId   Int
  questionId Int
  option     Options        @relation(fields: [optionId], references: [id])
  question   SurveyQuestion @relation(fields: [questionId], references: [id])
}

model OtherValue {
  id         Int            @id @default(autoincrement())
  loginId    Int
  questionId Int
  login      Login          @relation(fields: [loginId], references: [id])
  question   SurveyQuestion @relation(fields: [questionId], references: [id])
}

model StudentSkill {
  id      Int   @id @default(autoincrement())
  loginId Int
  skillId Int
  login   Login @relation(fields: [loginId], references: [id])
  skill   SkillLevel @relation(fields: [skillId], references: [id])

  @@unique([loginId, skillId]) // Prevent duplicate skill assignments
}
