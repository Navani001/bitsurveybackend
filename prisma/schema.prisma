generator client {
  provider = "prisma-client-js"

}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Login {
  id                     Int                     @id @default(autoincrement())
  name                   String
  email                  String                  @unique
  roleId                 Int
  logo                   String?
  isDeleted              Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  role                   Role                    @relation(fields: [roleId], references: [id])
  surveys                Survey[]
  otherValues            OtherValue[]
  studentSurveyResponses StudentSurveyResponse[]
}

model Role {
  id     Int     @id @default(autoincrement())
  name   String
  logins Login[]
}

model QuestionType {
  id              Int              @id @default(autoincrement())
  name            String
  isDeleted       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  surveyQuestions SurveyQuestion[]
}

model OptionShowType {
  id                            Int                            @id @default(autoincrement())
  status                        String
  surveyQuestions               SurveyQuestion[]
  optionShowTypeSurveyQuestions OptionShowTypeSurveyQuestion[]
}

model OptionType {
  id              Int              @id @default(autoincrement())
  type            String
  surveyQuestions SurveyQuestion[]
  options         Options[]
}

model Survey {
  id              Int              @id @default(autoincrement())
  name            String
  facultyId       Int
  status          String
  startTime       DateTime?
  endTime         DateTime?
  groupId         Int              @default(-1)
  responseCount   Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  faculty         Login            @relation(fields: [facultyId], references: [id])
  surveyQuestions SurveyQuestion[]
}

model SurveyQuestion {
  id                            Int                            @id @default(autoincrement())
  questionTypeId                Int
  surveyId                      Int
  question                      String
  score                         Int                            @default(-1)
  optionTypeId                  Int
  isOther                       Boolean                        @default(false)
  isActive                      Boolean                        @default(true)
  isMultiple                    Boolean                        @default(false)
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  questionType                  QuestionType                   @relation(fields: [questionTypeId], references: [id])
  survey                        Survey                         @relation(fields: [surveyId], references: [id])
  optionType                    OptionType                     @relation(fields: [optionTypeId], references: [id])
  matrixColumns                 MatrixColumn[]
  optionsQuestions              OptionsQuestion[]
  studentSurveyResponses        StudentSurveyResponse[]
  otherValues                   OtherValue[]
  optionShowTypeSurveyQuestions OptionShowTypeSurveyQuestion[]
  OptionShowType                OptionShowType?                @relation(fields: [optionShowTypeId], references: [id])
  optionShowTypeId              Int?
}

model MatrixColumn {
  id         Int            @id @default(autoincrement())
  columnName String
  questionId Int
  question   SurveyQuestion @relation(fields: [questionId], references: [id])
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String
}

model Group {
  id        Int    @id @default(autoincrement())
  type      String
  typeId    Int
  level     Int    @default(0)
  minimumRp Int    @default(0)
  maximumRp Int    @default(1000000000)
  // Note: Cannot directly model the dual relationship from group.typeId to both skill.id and role.id in Prisma
  // You'll need to decide which one is the primary relationship or restructure this relationship
}

model OptionShowTypeSurveyQuestion {
  id               Int            @id @default(autoincrement())
  surveyQuestionId Int
  optionShowTypeId Int
  surveyQuestion   SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  optionShowType   OptionShowType @relation(fields: [optionShowTypeId], references: [id])
}

model StudentSurveyResponse {
  id                      Int            @id @default(autoincrement())
  surveyQuestionId        Int
  loginId                 Int
  preDefinedOptionId      Int            @default(-1)
  facultyOptionSelectedId Int            @default(-1)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  surveyQuestion          SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  login                   Login          @relation(fields: [loginId], references: [id])
}

model Options {
  id               Int               @id @default(autoincrement())
  name             String?
  optionTypeId     Int
  isPredefined     Boolean
  priority         Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isDeleted        Boolean           @default(false)
  optionType       OptionType        @relation(fields: [optionTypeId], references: [id])
  optionsQuestions OptionsQuestion[]
}

model OptionsQuestion {
  id         Int            @id @default(autoincrement())
  optionId   Int
  questionId Int
  option     Options        @relation(fields: [optionId], references: [id])
  question   SurveyQuestion @relation(fields: [questionId], references: [id])
}

model OtherValue {
  id         Int            @id @default(autoincrement())
  loginId    Int
  questionId Int
  login      Login          @relation(fields: [loginId], references: [id])
  question   SurveyQuestion @relation(fields: [questionId], references: [id])
}
