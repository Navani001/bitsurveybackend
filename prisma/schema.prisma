// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Prisma schema for College Survey System

// Enums
enum Status {
  completed
  deleted
  inProgress
  yetToStart
}

enum RoleType {
  admin
  faculty
  student
}

// Models
model Login {
  id                     Int                     @id @default(autoincrement())
  name                   String
  email                  String                  @unique
  logo                   String?
  isDeleted              Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  surveys                Survey[]
  studentSurveyResponses StudentSurveyResponse[]

  roleInfo Role @relation(fields: [roleId], references: [id])
  roleId   Int
}

model QuestionType {
  id              Int              @id @default(autoincrement())
  name            String
  label String
  isDeleted       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  surveyQuestions SurveyQuestion[]
}

model OptionShowType {
  id                            Int                            @id @default(autoincrement())
  name                        String
  optionShowTypeSurveyQuestions OptionShowTypeSurveyQuestion[]
  SurveyQuestion                SurveyQuestion[]
}

model OptionType {
  id                Int                 @id @default(autoincrement())
  name              String
  label             String
  surveyQuestions   SurveyQuestion[]
  preDefinedOptions PreDefinedOptions[]
}

model Survey {
  id              Int              @id @default(autoincrement())
  name            String
  facultyId       Int
  status          String
  startTime       DateTime?
  endTime         DateTime?
  groupId         Int              @default(-1)
  responseCount   Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  faculty         Login            @relation(fields: [facultyId], references: [id])
  surveyQuestions SurveyQuestion[]
}

model SurveyQuestion {
  id                      Int      @id @default(autoincrement())
  questionTypeId          Int
  surveyId                Int
  question                String
  score                   Int      @default(-1)
  facultyDefinedOptionsId Int?
  preDefinedOptionsId     Int?
  optionTypeId            Int
  isOther                 Boolean  @default(false)
  optionShowTypeId        Int?
  isActive                Boolean  @default(true)
  isMultiple              Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  questionType          QuestionType           @relation(fields: [questionTypeId], references: [id])
  survey                Survey                 @relation(fields: [surveyId], references: [id])
  optionType            OptionType             @relation(fields: [optionTypeId], references: [id])
  optionShowType        OptionShowType?        @relation(fields: [optionShowTypeId], references: [id])
  preDefinedOptions     PreDefinedOptions?     @relation(fields: [preDefinedOptionsId], references: [id])
  facultyCreatedOptions FacultyCreatedOptions? @relation(fields: [facultyDefinedOptionsId], references: [id])

  matrixColumns                 MatrixColumn[]
  studentSurveyResponses        StudentSurveyResponse[]
  optionShowTypeSurveyQuestions OptionShowTypeSurveyQuestion[]
}

model PreDefinedOptions {
  id           Int      @id @default(autoincrement())
  optionTypeId Int
  option       String
  priority     Int?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  optionType             OptionType              @relation(fields: [optionTypeId], references: [id])
  surveyQuestions        SurveyQuestion[]
  studentSurveyResponses StudentSurveyResponse[]
}

model MatrixColumn {
  id         Int    @id @default(autoincrement())
  columnName String
  questionId Int

  surveyQuestion SurveyQuestion @relation(fields: [questionId], references: [id])
}

model FacultyCreatedOptions {
  id        Int      @id @default(autoincrement())
  option    String
  priority  Int?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  surveyQuestions        SurveyQuestion[]
  studentSurveyResponses StudentSurveyResponse[]
}

model Role {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  logins Login[]
  groups Group[]
}

model Skill {
  id     Int     @id @default(autoincrement())
  name   String
  groups Group[]
}

model Group {
  id        Int    @id @default(autoincrement())
  type      String
  typeId    Int
  level     Int    @default(0)
  minimumRp Int    @default(0)
  maximumRp Int    @default(1000000000)

  skill   Skill @relation(fields: [skillId], references: [id])
  role    Role  @relation(fields: [roleId], references: [id])
  skillId Int
  roleId  Int
}

model OptionShowTypeSurveyQuestion {
  id                   Int @id @default(autoincrement())
  surveyQuestionTypeId Int
  optionStatusId       Int

  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionTypeId], references: [id])
  optionShowType OptionShowType @relation(fields: [optionStatusId], references: [id])
}

model StudentSurveyResponse {
  id                      Int      @id @default(autoincrement())
  surveyQuestionId        Int
  loginId                 Int
  preDefinedOptionId      Int      @default(-1)
  otherResponse           String?
  facultyOptionSelectedId Int      @default(-1)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  surveyQuestion        SurveyQuestion         @relation(fields: [surveyQuestionId], references: [id])
  login                 Login                  @relation(fields: [loginId], references: [id])
  preDefinedOption      PreDefinedOptions?     @relation(fields: [preDefinedOptionId], references: [id])
  facultyOptionSelected FacultyCreatedOptions? @relation(fields: [facultyOptionSelectedId], references: [id])
}
